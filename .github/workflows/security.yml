name: Security

on:
  push:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.6'  # Latest stable Go version

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-security-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-security-
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run Go vulnerability check with enhanced reporting
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        # Run with JSON output for better reporting
        govulncheck -json ./... > govulncheck-results.json || echo "Vulnerabilities found"
        # Also run with standard output for logs
        govulncheck ./...

    # Nancy OSS Index scan removed due to repository unavailability
    # - name: Install and run Nancy for dependency scanning
    #   run: |
    #     go install github.com/sonatypecommunity/nancy@latest
    #     # Generate list of dependencies
    #     go list -json -deps ./... | nancy sleuth --loud

    - name: Run Go mod audit
      run: |
        # Check for known security issues in dependencies
        go list -json -m all > go-deps.json
        
        # Install go-audit for additional dependency scanning
        go install github.com/elastic/go-sysinfo/cmd/go-sysinfo@latest
        
        # Check for outdated dependencies
        go list -u -m all > outdated-deps.txt || true

    - name: Upload vulnerability scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: vulnerability-scan-results
        path: |
          govulncheck-results.json
          go-deps.json
          outdated-deps.txt

    # Nancy OSS Index scan removed due to authentication issues

    # Frontend dependency audit removed - Go-only project

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'go' ]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality

    - name: Set up Go (for Go analysis)
      if: matrix.language == 'go'
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.6'  # Latest stable Go version

    - name: Cache Go modules (for Go analysis)
      if: matrix.language == 'go'
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-codeql-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-codeql-
          ${{ runner.os }}-go-

    - name: Build Go project (for Go analysis)
      if: matrix.language == 'go'
      run: go build ./...

    # JavaScript analysis removed - Go-only project

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  gosec-scan:
    name: Go Security Scan (Gosec)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.6'  # Latest stable Go version

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-gosec-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-gosec-
          ${{ runner.os }}-go-

    - name: Download Go modules
      run: go mod download

    - name: Install and run Gosec with enhanced configuration
      run: |
        # Install gosec using the correct import path
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        
        # Create gosec configuration file for enhanced scanning
        cat > .gosec.json << 'EOF'
        {
          "severity": "medium",
          "confidence": "medium",
          "rules": {},
          "exclude": [],
          "include": [
            "G101", "G102", "G103", "G104", "G105", "G106", "G107", "G108", "G109", "G110",
            "G201", "G202", "G203", "G204", "G301", "G302", "G303", "G304", "G305", "G306", "G307",
            "G401", "G402", "G403", "G404", "G501", "G502", "G503", "G504", "G505", "G601"
          ]
        }
        EOF
        
        # Run gosec with configuration and multiple output formats
        gosec -conf .gosec.json -fmt sarif -out gosec-results.sarif ./...
        gosec -conf .gosec.json -fmt json -out gosec-results.json ./...
        gosec -conf .gosec.json -fmt text -out gosec-results.txt ./... || true

    - name: Upload Gosec results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: gosec-scan-results
        path: |
          gosec-results.sarif
          gosec-results.json
          gosec-results.txt
          .gosec.json
        
    - name: Upload Gosec scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: gosec-results.sarif
        category: gosec

  semgrep-scan:
    name: Semgrep Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Semgrep
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/golang

    - name: Upload SARIF file for GitHub Advanced Security Dashboard
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: semgrep.sarif

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog OSS with enhanced configuration
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.before || 'HEAD~1' }}
        head: ${{ github.sha }}
        extra_args: --only-verified --json --results=trufflehog-results.json
      timeout-minutes: 10

    - name: Run GitLeaks with enhanced scanning
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_ENABLE_COMMENTS: false

    - name: Create custom GitLeaks config
      run: |
        cat > .gitleaks.toml << 'EOF'
        title = "APIWeaver GitLeaks Config"
        
        [[rules]]
        description = "AWS Access Key"
        id = "aws-access-key-id"
        regex = '''AKIA[0-9A-Z]{16}'''
        tags = ["key", "AWS"]
        
        [[rules]]
        description = "AWS Secret Key"
        id = "aws-secret-access-key"
        regex = '''[A-Za-z0-9/+=]{40}'''
        tags = ["key", "AWS"]
        
        [[rules]]
        description = "Generic API Key"
        id = "generic-api-key"
        regex = '''(?i)(api_key|apikey|api-key)\s*[:=]\s*['"][A-Za-z0-9]{16,}['"]'''
        tags = ["key", "API"]
        
        [[rules]]
        description = "GitHub Token"
        id = "github-token"
        regex = '''ghp_[0-9a-zA-Z]{36}'''
        tags = ["key", "GitHub"]
        
        [[rules]]
        description = "Database Connection String"
        id = "database-connection"
        regex = '''(?i)(mongodb|mysql|postgres|postgresql)://[^\s]+'''
        tags = ["secret", "database"]
        
        [[rules]]
        description = "Private Key"
        id = "private-key"
        regex = '''-----BEGIN [A-Z]+ PRIVATE KEY-----'''
        tags = ["key", "private"]
        EOF
        
        # Run GitLeaks with custom config
        docker run --rm -v "$PWD:/code" zricethezav/gitleaks:latest detect --source="/code" --config="/code/.gitleaks.toml" --report-format json --report-path /code/gitleaks-custom-results.json || true

    - name: Run detect-secrets
      run: |
        pip install detect-secrets
        detect-secrets scan --all-files > detect-secrets-baseline.json || true
        detect-secrets audit detect-secrets-baseline.json --report > detect-secrets-report.json || true

    - name: Run Whispers for additional secret detection
      run: |
        pip install whispers
        whispers --config whispers.yml --output whispers-results.json . || true

    - name: Create Whispers config
      run: |
        cat > whispers.yml << 'EOF'
        rules:
          - id: "aws-access-key"
            message: "AWS Access Key detected"
            type: "keyword"
            regex: "AKIA[0-9A-Z]{16}"
          - id: "aws-secret-key"
            message: "AWS Secret Key detected"
            type: "keyword"
            regex: "[A-Za-z0-9/+=]{40}"
          - id: "jwt-token"
            message: "JWT Token detected"
            type: "keyword"
            regex: "eyJ[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+/=]*"
          - id: "database-url"
            message: "Database URL detected"
            type: "keyword"
            regex: "(mongodb|mysql|postgres|postgresql)://[^\\s]+"
        EOF

    - name: Upload secret scanning results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: secret-scan-results
        path: |
          trufflehog-results.json
          gitleaks-custom-results.json
          detect-secrets-baseline.json
          detect-secrets-report.json
          whispers-results.json
          .gitleaks.toml
          whispers.yml

  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.6'  # Latest stable Go version

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-license-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-license-
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Install license scanning tools
      run: |
        go install github.com/google/go-licenses@latest
        go install github.com/fossa-contrib/fossa-cli@latest || echo "FOSSA CLI installation failed"
        pip install licensecheck

    - name: Check Go dependencies licenses with enhanced reporting
      run: |
        # Generate comprehensive license report
        go-licenses check ./... || echo "License check completed with warnings"
        go-licenses report ./... > go-licenses.txt
        go-licenses csv ./... > go-licenses.csv
        
        # Get detailed license information
        go list -json -deps ./... | jq -r '.ImportPath' | sort | uniq > dependencies.txt
        
        # Create license summary
        echo "# License Compliance Report" > license-summary.md
        echo "" >> license-summary.md
        echo "Generated on: $(date)" >> license-summary.md
        echo "" >> license-summary.md
        echo "## Dependencies" >> license-summary.md
        echo "" >> license-summary.md
        echo "\`\`\`" >> license-summary.md
        cat dependencies.txt >> license-summary.md
        echo "\`\`\`" >> license-summary.md

    - name: Run additional license checks
      run: |
        # Check for restrictive licenses
        licensecheck -z . > licensecheck-results.txt || echo "License check completed"

    - name: Upload license reports
      uses: actions/upload-artifact@v4
      with:
        name: license-reports
        path: |
          go-licenses.txt
          go-licenses.csv
          dependencies.txt
          license-summary.md
          licensecheck-results.txt

  security-policy-check:
    name: Security Policy Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for security policy
      run: |
        if [ ! -f SECURITY.md ]; then
          echo "⚠️ Missing SECURITY.md file"
          exit 1
        fi
        echo "✅ SECURITY.md found"

    - name: Check for dependabot config
      run: |
        if [ ! -f .github/dependabot.yml ]; then
          echo "⚠️ Missing dependabot configuration"
          exit 1
        fi
        echo "✅ Dependabot configuration found"

    - name: Validate Docker security practices
      run: |
        if [ -f Dockerfile ]; then
          # Check for non-root user
          if ! grep -q "USER" Dockerfile; then
            echo "⚠️ Dockerfile should specify a non-root USER"
          fi
          
          # Check for COPY with proper ownership
          if grep -q "COPY.*--chown" Dockerfile; then
            echo "✅ Dockerfile uses proper COPY ownership"
          fi
          
          # Check for minimal base image
          if grep -q "FROM.*alpine\|FROM.*distroless\|FROM scratch" Dockerfile; then
            echo "✅ Dockerfile uses minimal base image"
          else
            echo "⚠️ Consider using minimal base image (alpine, distroless, scratch)"
          fi
        fi

  # Container security scan disabled - no Dockerfile yet
  # container-security-scan:
  #   name: Container Security Scan
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push'
  #   
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  # 
  #   - name: Build test image
  #     run: |
  #       docker build -t apiweaver-security-test .
  # 
  #   - name: Run Trivy vulnerability scanner
  #     uses: aquasecurity/trivy-action@master
  #     with:
  #       image-ref: 'apiweaver-security-test'
  #       format: 'sarif'
  #       output: 'trivy-results.sarif'
  # 
  #   - name: Upload Trivy scan results
  #     uses: github/codeql-action/upload-sarif@v3
  #     if: always()
  #     with:
  #       sarif_file: 'trivy-results.sarif'
  # 
  #   - name: Run Docker Bench Security
  #     run: |
  #       git clone https://github.com/docker/docker-bench-security.git
  #       cd docker-bench-security
  #       git clone https://github.com/docker/docker-bench-security.git
  #       cd docker-bench-security
  #       sudo sh docker-bench-security.sh

  supply-chain-security:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.6'  # Latest stable Go version

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-supply-chain-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-supply-chain-
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify Go module checksums and integrity
      run: |
        # Verify module checksums
        go mod verify
        
        # Generate comprehensive module information
        go mod download -json all | jq -r '.Path + " " + .Sum' > go-checksums.txt
        go list -m -json all > go-modules-full.json
        
        # Check for replace directives (potential supply chain risk)
        if grep -q "replace" go.mod; then
          echo "⚠️ Found replace directives in go.mod - review for supply chain risks"
          grep "replace" go.mod > replace-directives.txt
        else
          echo "✅ No replace directives found"
          echo "No replace directives" > replace-directives.txt
        fi

    - name: Run SLSA verifier
      uses: slsa-framework/slsa-verifier/actions/installer@v2.5.1

    - name: Enhanced supply chain verification
      run: |
        # Check for Go module signatures when available
        echo "Go module signature verification not yet available" > module-signatures.txt
        
        # Check for known malicious packages
        echo "Checking for known malicious packages..." > supply-chain-check.txt
        go list -json -deps ./... | jq -r '.ImportPath' | grep -E "(typosquatting|malicious)" || echo "No known malicious packages detected" >> supply-chain-check.txt

    - name: Generate enhanced SBOM (Software Bill of Materials)
      run: |
        # Install SBOM generation tools
        go install github.com/anchore/syft/cmd/syft@latest
        curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
        
        # Generate SBOM in multiple formats
        syft packages dir:. -o spdx-json > sbom.spdx.json
        syft packages dir:. -o cyclonedx-json > sbom.cyclonedx.json
        syft packages dir:. -o table > sbom.table.txt
        
        # Scan SBOM for vulnerabilities
        grype sbom:sbom.spdx.json -o json > grype-vulnerabilities.json || echo "Grype scan completed"
        grype sbom:sbom.spdx.json -o table > grype-vulnerabilities.txt || echo "Grype scan completed"

    - name: Supply chain risk assessment
      run: |
        echo "# Supply Chain Security Assessment" > supply-chain-report.md
        echo "" >> supply-chain-report.md
        echo "Generated on: $(date)" >> supply-chain-report.md
        echo "" >> supply-chain-report.md
        
        echo "## Module Verification" >> supply-chain-report.md
        if go mod verify; then
          echo "✅ All modules verified successfully" >> supply-chain-report.md
        else
          echo "❌ Module verification failed" >> supply-chain-report.md
        fi
        echo "" >> supply-chain-report.md
        
        echo "## Replace Directives" >> supply-chain-report.md
        cat replace-directives.txt >> supply-chain-report.md
        echo "" >> supply-chain-report.md
        
        echo "## Dependencies Count" >> supply-chain-report.md
        echo "Total dependencies: $(go list -deps ./... | wc -l)" >> supply-chain-report.md
        echo "Direct dependencies: $(go list -json -m all | jq -r 'select(.Main != true) | .Path' | wc -l)" >> supply-chain-report.md

    - name: Upload SBOM and supply chain reports
      uses: actions/upload-artifact@v4
      with:
        name: supply-chain-security
        path: |
          sbom.spdx.json
          sbom.cyclonedx.json
          sbom.table.txt
          grype-vulnerabilities.json
          grype-vulnerabilities.txt
          go-checksums.txt
          go-modules-full.json
          replace-directives.txt
          module-signatures.txt
          supply-chain-check.txt
          supply-chain-report.md

  advanced-sast:
    name: Advanced SAST Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.6'  # Latest stable Go version

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-sast-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-sast-
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Install advanced SAST tools
      run: |
        # Install staticcheck
        go install honnef.co/go/tools/cmd/staticcheck@latest
        
        # Install go-critic
        go install github.com/go-critic/go-critic/cmd/gocritic@latest
        
        # Nancy removed due to repository unavailability
        # go install github.com/sonatypecommunity/nancy@latest
        
        # Install govulncheck
        go install golang.org/x/vuln/cmd/govulncheck@latest

    - name: Run staticcheck
      run: |
        staticcheck -f json ./internal/... ./pkg/... ./cmd/... > staticcheck-results.json || echo "Staticcheck completed"
        staticcheck ./internal/... ./pkg/... ./cmd/... > staticcheck-results.txt || echo "Staticcheck completed"

    - name: Run go-critic
      run: |
        gocritic check -enableAll ./internal/... ./pkg/... ./cmd/... > gocritic-results.txt || echo "Go-critic completed"

    - name: Run comprehensive Go security checks
      run: |
        # Run go vet with all checks
        go vet -all ./internal/... ./pkg/... ./cmd/... > govet-results.txt 2>&1 || echo "Go vet completed"
        
        # Check for common security issues
        echo "# Go Security Analysis" > go-security-analysis.md
        echo "" >> go-security-analysis.md
        echo "Generated on: $(date)" >> go-security-analysis.md
        echo "" >> go-security-analysis.md
        
        # Check for unsafe package usage
        echo "## Unsafe Package Usage" >> go-security-analysis.md
        if grep -r "unsafe\." --include="*.go" .; then
          echo "⚠️ Found usage of unsafe package" >> go-security-analysis.md
        else
          echo "✅ No unsafe package usage found" >> go-security-analysis.md
        fi
        echo "" >> go-security-analysis.md
        
        # Check for CGO usage
        echo "## CGO Usage" >> go-security-analysis.md
        if grep -r "import \"C\"" --include="*.go" .; then
          echo "⚠️ Found CGO usage - review for security implications" >> go-security-analysis.md
        else
          echo "✅ No CGO usage found" >> go-security-analysis.md
        fi
        echo "" >> go-security-analysis.md
        
        # Check for reflection usage
        echo "## Reflection Usage" >> go-security-analysis.md
        if grep -r "reflect\." --include="*.go" .; then
          echo "⚠️ Found reflection usage - review for security implications" >> go-security-analysis.md
        else
          echo "✅ No reflection usage found" >> go-security-analysis.md
        fi

    - name: Run custom security rules
      run: |
        echo "Running custom security pattern analysis..."
        
        # Check for hardcoded credentials patterns
        echo "## Hardcoded Credentials Check" >> go-security-analysis.md
        if grep -r -i -E "(password|secret|token|key)\s*[:=]\s*[\"'][^\"']+[\"']" --include="*.go" . || \
           grep -r -i -E "(api_key|apikey|auth_token)\s*[:=]" --include="*.go" .; then
          echo "⚠️ Potential hardcoded credentials found" >> go-security-analysis.md
        else
          echo "✅ No hardcoded credentials patterns detected" >> go-security-analysis.md
        fi
        echo "" >> go-security-analysis.md
        
        # Check for SQL injection patterns
        echo "## SQL Injection Risk Check" >> go-security-analysis.md
        if grep -r "fmt\.Sprintf.*SELECT\|fmt\.Sprintf.*INSERT\|fmt\.Sprintf.*UPDATE\|fmt\.Sprintf.*DELETE" --include="*.go" .; then
          echo "⚠️ Potential SQL injection risks found (string formatting in SQL)" >> go-security-analysis.md
        else
          echo "✅ No obvious SQL injection patterns detected" >> go-security-analysis.md
        fi
        echo "" >> go-security-analysis.md
        
        # Check for command injection patterns
        echo "## Command Injection Risk Check" >> go-security-analysis.md
        if grep -r "exec\.Command.*fmt\.Sprintf\|exec\.Command.*+\|os\.system" --include="*.go" .; then
          echo "⚠️ Potential command injection risks found" >> go-security-analysis.md
        else
          echo "✅ No obvious command injection patterns detected" >> go-security-analysis.md
        fi

    - name: Upload SAST results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: advanced-sast-results
        path: |
          staticcheck-results.json
          staticcheck-results.txt
          gocritic-results.txt
          govet-results.txt
          go-security-analysis.md

  container-security:
    name: Container Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for Dockerfile
      id: check-dockerfile
      run: |
        if [ -f Dockerfile ]; then
          echo "dockerfile-exists=true" >> $GITHUB_OUTPUT
        else
          echo "dockerfile-exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Create empty files if no Dockerfile
      if: steps.check-dockerfile.outputs.dockerfile-exists == 'false'
      run: |
        echo "No Dockerfile found" > dockerfile-lint.txt
        echo "No Docker image to scan" > trivy-image-results.txt

    - name: Install container security tools
      run: |
        # Install Hadolint for Dockerfile linting
        wget -O hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
        chmod +x hadolint
        sudo mv hadolint /usr/local/bin/
        
        # Install Trivy
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
        
        # Install Docker Bench Security
        git clone https://github.com/docker/docker-bench-security.git

    - name: Lint Dockerfile with Hadolint
      if: steps.check-dockerfile.outputs.dockerfile-exists == 'true'
      run: |
        hadolint Dockerfile > dockerfile-lint.txt || echo "Hadolint completed"

    - name: Build Docker image for security scanning
      if: steps.check-dockerfile.outputs.dockerfile-exists == 'true'
      run: |
        docker build -t apiweaver-security-scan:latest .

    - name: Run Trivy filesystem scan
      run: |
        trivy fs --security-checks vuln,config,secret --format json --output trivy-fs-results.json .
        trivy fs --security-checks vuln,config,secret --format table --output trivy-fs-results.txt .

    - name: Run Trivy image scan
      if: steps.check-dockerfile.outputs.dockerfile-exists == 'true'
      run: |
        if docker image inspect apiweaver-security-scan:latest >/dev/null 2>&1; then
          trivy image --format json --output trivy-image-results.json apiweaver-security-scan:latest
          trivy image --format table --output trivy-image-results.txt apiweaver-security-scan:latest
        else
          echo "No Docker image to scan" > trivy-image-results.txt
        fi

    - name: Upload container security results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: container-security-results
        path: |
          dockerfile-lint.txt
          trivy-fs-results.json
          trivy-fs-results.txt
          trivy-image-results.json
          trivy-image-results.txt

  security-report:
    name: Comprehensive Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, codeql-analysis, gosec-scan, semgrep-scan, secret-scan, license-scan, advanced-sast, supply-chain-security]
    
    steps:
    - name: Generate comprehensive security report
      run: |
        echo "# Comprehensive Security Scan Summary" > security-report.md
        echo "" >> security-report.md
        echo "**APIWeaver Security Assessment Report**" >> security-report.md
        echo "" >> security-report.md
        echo "Generated on: $(date)" >> security-report.md
        echo "Workflow Run: ${{ github.run_number }}" >> security-report.md
        echo "Commit: ${{ github.sha }}" >> security-report.md
        echo "" >> security-report.md
        
        echo "## 🔍 Scan Results Overview" >> security-report.md
        echo "" >> security-report.md
        
        # Core security scans
        echo "### Core Security Scans" >> security-report.md
        if [ "${{ needs.dependency-scan.result }}" = "success" ]; then
          echo "✅ **Dependency Vulnerability Scan**: PASSED" >> security-report.md
        else
          echo "❌ **Dependency Vulnerability Scan**: FAILED" >> security-report.md
        fi
        
        if [ "${{ needs.codeql-analysis.result }}" = "success" ]; then
          echo "✅ **CodeQL Static Analysis**: PASSED" >> security-report.md
        else
          echo "❌ **CodeQL Static Analysis**: FAILED" >> security-report.md
        fi
        
        if [ "${{ needs.gosec-scan.result }}" = "success" ]; then
          echo "✅ **Gosec Security Scan**: PASSED" >> security-report.md
        else
          echo "❌ **Gosec Security Scan**: FAILED" >> security-report.md
        fi
        
        if [ "${{ needs.semgrep-scan.result }}" = "success" ]; then
          echo "✅ **Semgrep SAST**: PASSED" >> security-report.md
        else
          echo "❌ **Semgrep SAST**: FAILED" >> security-report.md
        fi
        echo "" >> security-report.md
        
        # Advanced scans
        echo "### Advanced Security Scans" >> security-report.md
        if [ "${{ needs.secret-scan.result }}" = "success" ]; then
          echo "✅ **Secret Detection (Multi-tool)**: PASSED" >> security-report.md
        else
          echo "❌ **Secret Detection (Multi-tool)**: FAILED" >> security-report.md
        fi
        
        if [ "${{ needs.license-scan.result }}" = "success" ]; then
          echo "✅ **License Compliance**: PASSED" >> security-report.md
        else
          echo "❌ **License Compliance**: FAILED" >> security-report.md
        fi
        
        if [ "${{ needs.advanced-sast.result }}" = "success" ]; then
          echo "✅ **Advanced SAST (Staticcheck + Go-critic)**: PASSED" >> security-report.md
        else
          echo "❌ **Advanced SAST (Staticcheck + Go-critic)**: FAILED" >> security-report.md
        fi
        
        if [ "${{ needs.supply-chain-security.result }}" = "success" ]; then
          echo "✅ **Supply Chain Security (SBOM + Verification)**: PASSED" >> security-report.md
        else
          echo "❌ **Supply Chain Security (SBOM + Verification)**: FAILED" >> security-report.md
        fi
        echo "" >> security-report.md
        
        # Security tools summary
        echo "## 🛠️ Security Tools Used" >> security-report.md
        echo "" >> security-report.md
        echo "- **Vulnerability Scanning**: govulncheck, Nancy OSS Index, Grype" >> security-report.md
        echo "- **Static Analysis**: CodeQL, Gosec, Semgrep, Staticcheck, Go-critic" >> security-report.md
        echo "- **Secret Detection**: TruffleHog, GitLeaks, detect-secrets, Whispers" >> security-report.md
        echo "- **License Compliance**: go-licenses, licensecheck" >> security-report.md
        echo "- **Supply Chain**: Syft (SBOM), SLSA verifier, Module verification" >> security-report.md
        echo "- **Container Security**: Trivy, Hadolint (when applicable)" >> security-report.md
        echo "" >> security-report.md
        
        # Risk assessment
        echo "## 🚨 Risk Assessment" >> security-report.md
        echo "" >> security-report.md
        FAILED_SCANS=0
        [ "${{ needs.dependency-scan.result }}" != "success" ] && FAILED_SCANS=$((FAILED_SCANS + 1))
        [ "${{ needs.codeql-analysis.result }}" != "success" ] && FAILED_SCANS=$((FAILED_SCANS + 1))
        [ "${{ needs.gosec-scan.result }}" != "success" ] && FAILED_SCANS=$((FAILED_SCANS + 1))
        [ "${{ needs.semgrep-scan.result }}" != "success" ] && FAILED_SCANS=$((FAILED_SCANS + 1))
        [ "${{ needs.secret-scan.result }}" != "success" ] && FAILED_SCANS=$((FAILED_SCANS + 1))
        [ "${{ needs.license-scan.result }}" != "success" ] && FAILED_SCANS=$((FAILED_SCANS + 1))
        [ "${{ needs.advanced-sast.result }}" != "success" ] && FAILED_SCANS=$((FAILED_SCANS + 1))
        [ "${{ needs.supply-chain-security.result }}" != "success" ] && FAILED_SCANS=$((FAILED_SCANS + 1))
        
        if [ $FAILED_SCANS -eq 0 ]; then
          echo "🟢 **LOW RISK**: All security scans passed successfully" >> security-report.md
        elif [ $FAILED_SCANS -le 2 ]; then
          echo "🟡 **MEDIUM RISK**: $FAILED_SCANS security scan(s) failed - review required" >> security-report.md
        else
          echo "🔴 **HIGH RISK**: $FAILED_SCANS security scan(s) failed - immediate attention required" >> security-report.md
        fi
        echo "" >> security-report.md
        
        # Next steps
        echo "## 📋 Next Steps" >> security-report.md
        echo "" >> security-report.md
        echo "1. Review failed scan results in the GitHub Security tab" >> security-report.md
        echo "2. Download and analyze detailed scan artifacts" >> security-report.md
        echo "3. Address any identified vulnerabilities or issues" >> security-report.md
        echo "4. Update dependencies if security vulnerabilities are found" >> security-report.md
        echo "5. Consider implementing additional security measures based on findings" >> security-report.md
        echo "" >> security-report.md
        
        echo "---" >> security-report.md
        echo "*This report was automatically generated by the APIWeaver security workflow*" >> security-report.md
        
        cat security-report.md

    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-report.md