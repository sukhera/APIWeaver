name: Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.6'

    - name: Run Go vulnerability check
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

    - name: Run Nancy (OSS Index) scan
      run: |
        go install github.com/sonatypecommunity/nancy@latest
        go list -json -deps ./... | nancy sleuth

    # Frontend dependency audit removed - Go-only project

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'go' ]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended,security-and-quality

    - name: Set up Go (for Go analysis)
      if: matrix.language == 'go'
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.6'

    - name: Build Go project (for Go analysis)
      if: matrix.language == 'go'
      run: go build ./...

    # JavaScript analysis removed - Go-only project

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  gosec-scan:
    name: Go Security Scan (Gosec)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.6'

    - name: Install Gosec
      run: go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest

    - name: Run Gosec Security Scanner
      run: gosec -fmt sarif -out gosec-results.sarif ./...

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec-results.sarif

  semgrep-scan:
    name: Semgrep Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Semgrep
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/golang
          p/react
        generateSarif: "1"

    - name: Upload SARIF file for GitHub Advanced Security Dashboard
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: semgrep.sarif

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.6'

    - name: Install go-licenses
      run: go install github.com/google/go-licenses@latest

    - name: Check Go dependencies licenses
      run: |
        go-licenses check ./...
        go-licenses report ./... > go-licenses.txt

    - name: Upload license reports
      uses: actions/upload-artifact@v4
      with:
        name: license-reports
        path: go-licenses.txt

  security-policy-check:
    name: Security Policy Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for security policy
      run: |
        if [ ! -f SECURITY.md ]; then
          echo "⚠️ Missing SECURITY.md file"
          exit 1
        fi
        echo "✅ SECURITY.md found"

    - name: Check for dependabot config
      run: |
        if [ ! -f .github/dependabot.yml ]; then
          echo "⚠️ Missing dependabot configuration"
          exit 1
        fi
        echo "✅ Dependabot configuration found"

    - name: Validate Docker security practices
      run: |
        if [ -f Dockerfile ]; then
          # Check for non-root user
          if ! grep -q "USER" Dockerfile; then
            echo "⚠️ Dockerfile should specify a non-root USER"
          fi
          
          # Check for COPY with proper ownership
          if grep -q "COPY.*--chown" Dockerfile; then
            echo "✅ Dockerfile uses proper COPY ownership"
          fi
          
          # Check for minimal base image
          if grep -q "FROM.*alpine\|FROM.*distroless\|FROM scratch" Dockerfile; then
            echo "✅ Dockerfile uses minimal base image"
          else
            echo "⚠️ Consider using minimal base image (alpine, distroless, scratch)"
          fi
        fi

  # Container security scan disabled - no Dockerfile yet
  # container-security-scan:
  #   name: Container Security Scan
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'push'
  #   
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  # 
  #   - name: Build test image
  #     run: |
  #       docker build -t apiweaver-security-test .
  # 
  #   - name: Run Trivy vulnerability scanner
  #     uses: aquasecurity/trivy-action@master
  #     with:
  #       image-ref: 'apiweaver-security-test'
  #       format: 'sarif'
  #       output: 'trivy-results.sarif'
  # 
  #   - name: Upload Trivy scan results
  #     uses: github/codeql-action/upload-sarif@v3
  #     if: always()
  #     with:
  #       sarif_file: 'trivy-results.sarif'
  # 
  #   - name: Run Docker Bench Security
  #     run: |
  #       git clone https://github.com/docker/docker-bench-security.git
  #       cd docker-bench-security
  #       git clone https://github.com/docker/docker-bench-security.git
  #       cd docker-bench-security
  #       sudo sh docker-bench-security.sh

  supply-chain-security:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.6'

    - name: Verify Go module checksums
      run: |
        go mod verify
        go mod download -json all | jq -r '.Path + " " + .Sum' > go-checksums.txt

    - name: Run SLSA verifier
      uses: slsa-framework/slsa-verifier/actions/installer@v2.5.1

    - name: Check Go module signatures (if available)
      run: |
        # This would check module signatures when Go module signing is available
        echo "Go module signature verification not yet available"

    - name: Generate SBOM (Software Bill of Materials)
      run: |
        go install github.com/anchore/syft/cmd/syft@latest
        syft packages dir:. -o spdx-json > sbom.spdx.json

    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom
        path: sbom.spdx.json

  security-report:
    name: Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, codeql-analysis, gosec-scan, semgrep-scan, secret-scan, license-scan]
    if: always()
    
    steps:
    - name: Generate security report
      run: |
        echo "# Security Scan Summary" > security-report.md
        echo "" >> security-report.md
        echo "## Scan Results" >> security-report.md
        echo "" >> security-report.md
        
        if [ "${{ needs.dependency-scan.result }}" = "success" ]; then
          echo "✅ Dependency scan: PASSED" >> security-report.md
        else
          echo "❌ Dependency scan: FAILED" >> security-report.md
        fi
        
        if [ "${{ needs.codeql-analysis.result }}" = "success" ]; then
          echo "✅ CodeQL analysis: PASSED" >> security-report.md
        else
          echo "❌ CodeQL analysis: FAILED" >> security-report.md
        fi
        
        if [ "${{ needs.gosec-scan.result }}" = "success" ]; then
          echo "✅ Gosec scan: PASSED" >> security-report.md
        else
          echo "❌ Gosec scan: FAILED" >> security-report.md
        fi
        
        if [ "${{ needs.semgrep-scan.result }}" = "success" ]; then
          echo "✅ Semgrep scan: PASSED" >> security-report.md
        else
          echo "❌ Semgrep scan: FAILED" >> security-report.md
        fi
        
        if [ "${{ needs.secret-scan.result }}" = "success" ]; then
          echo "✅ Secret detection: PASSED" >> security-report.md
        else
          echo "❌ Secret detection: FAILED" >> security-report.md
        fi
        
        if [ "${{ needs.license-scan.result }}" = "success" ]; then
          echo "✅ License compliance: PASSED" >> security-report.md
        else
          echo "❌ License compliance: FAILED" >> security-report.md
        fi
        
        echo "" >> security-report.md
        echo "Generated on: $(date)" >> security-report.md
        
        cat security-report.md

    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-report.md