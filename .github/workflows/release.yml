name: Release

on:
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: '1.24.6'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_name: ${{ steps.get_version.outputs.VERSION }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        # Get previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        echo "## Changes" > CHANGELOG.md
        if [ -n "$PREV_TAG" ]; then
          echo "### Commits since $PREV_TAG:" >> CHANGELOG.md
          git log --pretty=format:"- %s (%h)" $PREV_TAG..HEAD >> CHANGELOG.md
        else
          echo "### All commits:" >> CHANGELOG.md
          git log --pretty=format:"- %s (%h)" >> CHANGELOG.md
        fi
        
        echo "" >> CHANGELOG.md
        echo "## Installation" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### Binary Downloads" >> CHANGELOG.md
        echo "Download the appropriate binary for your platform from the assets below." >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### Docker" >> CHANGELOG.md
        echo "\`\`\`bash" >> CHANGELOG.md
        echo "docker pull ghcr.io/sukhera/apiweaver:${{ steps.get_version.outputs.VERSION }}" >> CHANGELOG.md
        echo "\`\`\`" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### Go Install" >> CHANGELOG.md
        echo "\`\`\`bash" >> CHANGELOG.md
        echo "go install github.com/sukhera/APIWeaver/cmd/apiweaver@${{ steps.get_version.outputs.VERSION }}" >> CHANGELOG.md
        echo "\`\`\`" >> CHANGELOG.md

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        release_name: APIWeaver ${{ steps.get_version.outputs.VERSION }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.VERSION, '-') }}

  build-and-upload:
    name: Build and Upload Assets
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            goos: linux
            goarch: amd64
          - os: linux
            arch: arm64
            goos: linux
            goarch: arm64
          - os: darwin
            arch: amd64
            goos: darwin
            goarch: amd64
          - os: darwin
            arch: arm64
            goos: darwin
            goarch: arm64
          - os: windows
            arch: amd64
            goos: windows
            goarch: amd64
            ext: .exe
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Build frontend
      run: |
        cd frontend
        npm ci
        npm run build

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        # Embed frontend
        go generate ./...
        
        # Build with release info
        VERSION=${{ needs.create-release.outputs.tag_name }}
        LDFLAGS="-s -w -X main.version=$VERSION -X main.commit=$GITHUB_SHA -X main.date=$(date -u +%Y-%m-%dT%H:%M:%SZ)"
        
        BINARY_NAME="apiweaver-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }}"
        go build -ldflags="$LDFLAGS" -o "$BINARY_NAME" ./cmd/apiweaver

    - name: Create archive
      run: |
        BINARY_NAME="apiweaver-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }}"
        ARCHIVE_NAME="apiweaver-${{ needs.create-release.outputs.tag_name }}-${{ matrix.os }}-${{ matrix.arch }}"
        
        if [ "${{ matrix.os }}" = "windows" ]; then
          zip -r "${ARCHIVE_NAME}.zip" "$BINARY_NAME" LICENSE README.md
          echo "ASSET_PATH=${ARCHIVE_NAME}.zip" >> $GITHUB_ENV
          echo "ASSET_NAME=${ARCHIVE_NAME}.zip" >> $GITHUB_ENV
          echo "ASSET_TYPE=application/zip" >> $GITHUB_ENV
        else
          tar -czf "${ARCHIVE_NAME}.tar.gz" "$BINARY_NAME" LICENSE README.md
          echo "ASSET_PATH=${ARCHIVE_NAME}.tar.gz" >> $GITHUB_ENV
          echo "ASSET_NAME=${ARCHIVE_NAME}.tar.gz" >> $GITHUB_ENV
          echo "ASSET_TYPE=application/gzip" >> $GITHUB_ENV
        fi

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ env.ASSET_PATH }}
        asset_name: ${{ env.ASSET_NAME }}
        asset_content_type: ${{ env.ASSET_TYPE }}

  build-checksums:
    name: Generate Checksums
    runs-on: ubuntu-latest
    needs: [create-release, build-and-upload]
    
    steps:
    - name: Download all release assets
      uses: robinraju/release-downloader@v1.10
      with:
        tag: ${{ needs.create-release.outputs.tag_name }}
        fileName: "apiweaver-*"

    - name: Generate checksums
      run: |
        # Generate SHA256 checksums
        sha256sum apiweaver-* > checksums.txt
        
        # Generate SHA512 checksums  
        sha512sum apiweaver-* > checksums-sha512.txt

    - name: Upload checksums
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: checksums.txt
        asset_name: checksums.txt
        asset_content_type: text/plain

    - name: Upload SHA512 checksums
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: checksums-sha512.txt
        asset_name: checksums-sha512.txt
        asset_content_type: text/plain

  homebrew-update:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    needs: [create-release, build-checksums]
    if: ${{ !contains(needs.create-release.outputs.tag_name, '-') }}
    
    steps:
    - name: Update Homebrew formula
      uses: mislav/bump-homebrew-formula-action@v3
      with:
        formula-name: apiweaver
        formula-path: Formula/apiweaver.rb
        homebrew-tap: sukhera/homebrew-tap
        download-url: https://github.com/sukhera/APIWeaver/releases/download/${{ needs.create-release.outputs.tag_name }}/apiweaver-${{ needs.create-release.outputs.tag_name }}-darwin-amd64.tar.gz
        commit-message: |
          Update APIWeaver to ${{ needs.create-release.outputs.tag_name }}
          
          Automated update via GitHub Actions
      env:
        COMMITTER_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}

  docker-release:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/sukhera/apiweaver
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ needs.create-release.outputs.tag_name }}
          COMMIT=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, build-and-upload, docker-release]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.create-release.result == 'success' && needs.build-and-upload.result == 'success' }}
      run: |
        echo "‚úÖ Release ${{ needs.create-release.outputs.tag_name }} completed successfully!"
        echo "üê≥ Docker images available at: ghcr.io/sukhera/apiweaver:${{ needs.create-release.outputs.tag_name }}"
        echo "üì¶ Release assets available at: https://github.com/sukhera/APIWeaver/releases/tag/${{ needs.create-release.outputs.tag_name }}"

    - name: Notify failure
      if: ${{ needs.create-release.result == 'failure' || needs.build-and-upload.result == 'failure' }}
      run: |
        echo "‚ùå Release ${{ needs.create-release.outputs.tag_name }} failed!"
        exit 1