name: Docker

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'Dockerfile*'
      - '**.go'
      - 'go.mod'
      - 'go.sum'
      - 'frontend/**'
      - '.github/workflows/docker.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'Dockerfile*'
      - '**.go'
      - 'go.mod'
      - 'go.sum'
      - 'frontend/**'
      - '.github/workflows/docker.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: sukhera/apiweaver

jobs:
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ github.ref_name }}
          COMMIT=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        # Test the built image
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }} version
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }} --help

  build-development:
    name: Build Development Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build development image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: Dockerfile.dev
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev-${{ github.ref_name }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev-latest
        build-args: |
          VERSION=dev-${{ github.ref_name }}
          COMMIT=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-docker
    permissions:
      contents: read
      packages: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Trivy vulnerability scanner (table format)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }}
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

  docker-compose-test:
    name: Test Docker Compose
    runs-on: ubuntu-latest
    needs: build-docker
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create test docker-compose.yml
      run: |
        cat > docker-compose.test.yml << 'EOF'
        version: '3.8'
        services:
          apiweaver:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }}
            ports:
              - "8080:8080"
            environment:
              - MONGODB_URI=mongodb://mongo:27017/apiweaver
            depends_on:
              mongo:
                condition: service_healthy
            healthcheck:
              test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
              interval: 10s
              timeout: 5s
              retries: 3
              start_period: 30s
          
          mongo:
            image: mongo:7.0
            environment:
              MONGO_INITDB_ROOT_USERNAME: admin
              MONGO_INITDB_ROOT_PASSWORD: password
            healthcheck:
              test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
              interval: 10s
              timeout: 5s
              retries: 5
              start_period: 30s
        EOF

    - name: Test Docker Compose
      run: |
        # Start services
        docker-compose -f docker-compose.test.yml up -d
        
        # Wait for services to be healthy
        echo "Waiting for services to be ready..."
        timeout 120 bash -c 'until docker-compose -f docker-compose.test.yml ps | grep -q "healthy"; do sleep 5; done'
        
        # Test API health
        sleep 10
        curl -f http://localhost:8080/health || exit 1
        
        # Test basic functionality
        echo '## GET /test' > test.md
        curl -X POST http://localhost:8080/generate \
          -H "Content-Type: text/markdown" \
          -d @test.md \
          --fail || exit 1
        
        # Cleanup
        docker-compose -f docker-compose.test.yml down -v

  image-analysis:
    name: Image Analysis
    runs-on: ubuntu-latest
    needs: build-docker
    
    steps:
    - name: Analyze image size and layers
      run: |
        # Pull the image
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }}
        
        # Get image size
        IMAGE_SIZE=$(docker images ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }} --format "{{.Size}}")
        echo "Image size: $IMAGE_SIZE"
        
        # Analyze layers
        echo "=== Image History ==="
        docker history ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }}
        
        # Check for common issues
        echo "=== Security Check ==="
        
        # Check if running as root
        USER_ID=$(docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }} id -u)
        if [ "$USER_ID" = "0" ]; then
          echo "⚠️ Warning: Container running as root"
        else
          echo "✅ Container running as non-root user (UID: $USER_ID)"
        fi
        
        # Check image labels
        echo "=== Image Labels ==="
        docker inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }} | jq '.[0].Config.Labels'

  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [build-docker, security-scan, docker-compose-test]
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Delete old images
      uses: actions/delete-package-versions@v5
      with:
        package-name: apiweaver
        package-type: container
        min-versions-to-keep: 10
        ignore-versions: '^(latest|main|v\d+\.\d+\.\d+)$'