name: CI

on:
  push:
    branches: [ main, develop, feature/** ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.24.6'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: test
          MONGO_INITDB_ROOT_PASSWORD: test
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Generate mocks
      run: |
        go install github.com/vektra/mockery/v2@latest
        mockery

    - name: Run tests
      env:
        MONGODB_URI: mongodb://test:test@localhost:27017/apiweaver_test?authSource=admin
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        fail_ci_if_error: true

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m

  frontend-test:
    name: Frontend Test
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run type checking
      run: npm run type-check

    - name: Run linting
      run: npm run lint

    - name: Run tests
      run: npm run test

    - name: Build frontend
      run: npm run build

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: test
          MONGO_INITDB_ROOT_PASSWORD: test
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build binary
      run: go build -o apiweaver ./cmd/apiweaver

    - name: Run integration tests
      env:
        MONGODB_URI: mongodb://test:test@localhost:27017/apiweaver_integration?authSource=admin
      run: |
        ./apiweaver serve --port 8080 &
        SERVER_PID=$!
        sleep 5
        
        # Basic health check
        curl -f http://localhost:8080/health || exit 1
        
        # Test generate endpoint
        echo '## GET /test' > test.md
        curl -X POST http://localhost:8080/generate \
          -H "Content-Type: text/markdown" \
          -d @test.md \
          --fail || exit 1
        
        kill $SERVER_PID

  validate-spec:
    name: Validate OpenAPI Specs
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build binary
      run: go build -o apiweaver ./cmd/apiweaver

    - name: Test spec generation
      run: |
        # Create test markdown files
        mkdir -p test-specs
        
        echo '---
title: "Test API"
version: "1.0.0"
---

## GET /users
Get all users

| Parameter | Type | Required | Description |
|-----------|------|----------|-------------|
| limit     | int  | false    | Max results |

```json
{
  "users": [
    {"id": 1, "name": "John"}
  ]
}
```' > test-specs/simple.md
        
        # Generate OpenAPI spec
        ./apiweaver generate test-specs/simple.md -o test-specs/simple.yaml
        
        # Validate generated spec
        ./apiweaver validate test-specs/simple.yaml