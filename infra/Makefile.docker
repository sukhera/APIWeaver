# Docker-specific Makefile for APIWeaver
# Provides convenient commands for Docker operations

.PHONY: help docker-build docker-build-no-cache docker-run docker-stop docker-clean
.PHONY: docker-dev docker-prod docker-test docker-logs docker-backup docker-restore
.PHONY: docker-health docker-shell docker-mongo-shell docker-stats

# Variables
DOCKER_IMAGE_NAME = apiweaver
DOCKER_TAG ?= latest
COMPOSE_PROJECT_NAME = apiweaver
COMPOSE_FILE = local/docker-compose.yml
COMPOSE_FILE_PROD = production/docker-compose.prod.yml
COMPOSE_FILE_DEV = docker-compose.override.yml

# Colors for output
BLUE = \033[0;34m
GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
NC = \033[0m # No Color

help: ## Show this help message
	@echo "$(BLUE)APIWeaver Docker Commands$(NC)"
	@echo ""
	@echo "$(GREEN)Build Commands:$(NC)"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(YELLOW)%-20s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST) | grep -E "(build|image)"
	@echo ""
	@echo "$(GREEN)Development Commands:$(NC)"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(YELLOW)%-20s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST) | grep -E "(dev|test|logs)"
	@echo ""
	@echo "$(GREEN)Production Commands:$(NC)"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(YELLOW)%-20s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST) | grep -E "(prod|deploy)"
	@echo ""
	@echo "$(GREEN)Maintenance Commands:$(NC)"
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  $(YELLOW)%-20s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST) | grep -E "(backup|restore|clean|health)"
	@echo ""

# Build Commands
docker-build: ## Build the Docker image
	@echo "$(BLUE)Building APIWeaver Docker image...$(NC)"
	docker build \
		--build-arg VERSION=$(shell git describe --tags --always --dirty 2>/dev/null || echo "dev") \
		--build-arg COMMIT_SHA=$(shell git rev-parse --short HEAD 2>/dev/null || echo "unknown") \
		--build-arg BUILD_TIME=$(shell date -u '+%Y-%m-%dT%H:%M:%SZ') \
		-t $(DOCKER_IMAGE_NAME):$(DOCKER_TAG) \
		-t $(DOCKER_IMAGE_NAME):latest \
		-f production/Dockerfile \
		../..
	@echo "$(GREEN)✓ Docker image built successfully$(NC)"

docker-build-no-cache: ## Build the Docker image without cache
	@echo "$(BLUE)Building APIWeaver Docker image (no cache)...$(NC)"
	docker build --no-cache \
		--build-arg VERSION=$(shell git describe --tags --always --dirty 2>/dev/null || echo "dev") \
		--build-arg COMMIT_SHA=$(shell git rev-parse --short HEAD 2>/dev/null || echo "unknown") \
		--build-arg BUILD_TIME=$(shell date -u '+%Y-%m-%dT%H:%M:%SZ') \
		-t $(DOCKER_IMAGE_NAME):$(DOCKER_TAG) \
		-t $(DOCKER_IMAGE_NAME):latest \
		-f production/Dockerfile \
		../..
	@echo "$(GREEN)✓ Docker image built successfully (no cache)$(NC)"

# Development Commands
docker-dev: ## Start development environment with hot reload
	@echo "$(BLUE)Starting APIWeaver development environment...$(NC)"
	@if [ ! -f .env ]; then \
		echo "$(YELLOW)Creating .env file from .env.example...$(NC)"; \
		cp .env.example .env; \
	fi
	@echo "$(BLUE)Creating required directories...$(NC)"
	@mkdir -p data/mongodb data/apiweaver logs logs/mongodb backups
	docker-compose -p $(COMPOSE_PROJECT_NAME) -f $(COMPOSE_FILE) -f $(COMPOSE_FILE) up -d
	@echo "$(GREEN)✓ Development environment started$(NC)"
	@echo "$(BLUE)Services:$(NC)"
	@echo "  • APIWeaver API (Hot Reload): http://localhost:8080"
	@echo "  • React Frontend (Hot Reload): http://localhost:5173"
	@echo "  • MongoDB Express: http://localhost:8081"
	@echo "  • MongoDB: localhost:27017"
	@echo "  • Debugging Port: localhost:2345"
	@echo ""
	@echo "$(YELLOW)Development Features:$(NC)"
	@echo "  • Go hot reload with Air"
	@echo "  • React hot reload with Vite"
	@echo "  • Delve debugging on port 2345"
	@echo "  • Live code mounting"

docker-dev-build: ## Build and start development environment
	@echo "$(BLUE)Building and starting development environment...$(NC)"
	@mkdir -p data/mongodb data/apiweaver logs logs/mongodb backups
	docker-compose -p $(COMPOSE_PROJECT_NAME) -f $(COMPOSE_FILE) -f $(COMPOSE_FILE) up -d --build

docker-dev-logs: ## Show logs from development services
	docker-compose -p $(COMPOSE_PROJECT_NAME) -f $(COMPOSE_FILE) logs -f apiweaver-dev frontend-dev

docker-dev-go: ## Show logs from Go development service only
	docker-compose -p $(COMPOSE_PROJECT_NAME) -f $(COMPOSE_FILE) logs -f apiweaver-dev

docker-dev-react: ## Show logs from React development service only
	docker-compose -p $(COMPOSE_PROJECT_NAME) -f $(COMPOSE_FILE) logs -f frontend-dev

docker-test: ## Run tests in Docker environment
	@echo "$(BLUE)Running tests in Docker environment...$(NC)"
	@if docker-compose -p $(COMPOSE_PROJECT_NAME) ps apiweaver-dev >/dev/null 2>&1; then \
		docker-compose -p $(COMPOSE_PROJECT_NAME) -f $(COMPOSE_FILE) exec apiweaver-dev go version && \
		echo "$(GREEN)✓ Go development environment test passed$(NC)"; \
	elif docker-compose -p $(COMPOSE_PROJECT_NAME) ps apiweaver >/dev/null 2>&1; then \
		docker-compose -p $(COMPOSE_PROJECT_NAME) -f $(COMPOSE_FILE) exec apiweaver /app/apiweaver --version && \
		echo "$(GREEN)✓ Production environment test passed$(NC)"; \
	else \
		echo "$(RED)✗ No APIWeaver service running$(NC)"; \
		exit 1; \
	fi

docker-test-frontend: ## Test frontend development environment
	@echo "$(BLUE)Testing frontend development environment...$(NC)"
	@if docker-compose -p $(COMPOSE_PROJECT_NAME) ps frontend-dev >/dev/null 2>&1; then \
		docker-compose -p $(COMPOSE_PROJECT_NAME) -f $(COMPOSE_FILE) exec frontend-dev npm --version && \
		echo "$(GREEN)✓ Frontend development environment test passed$(NC)"; \
	else \
		echo "$(RED)✗ Frontend development service not running$(NC)"; \
		exit 1; \
	fi

docker-logs: ## Show logs from all services
	docker-compose -p $(COMPOSE_PROJECT_NAME) -f $(COMPOSE_FILE) logs -f

docker-logs-app: ## Show logs from APIWeaver service only
	@if docker-compose -p $(COMPOSE_PROJECT_NAME) ps apiweaver-dev >/dev/null 2>&1; then \
		docker-compose -p $(COMPOSE_PROJECT_NAME) -f $(COMPOSE_FILE) logs -f apiweaver-dev; \
	else \
		docker-compose -p $(COMPOSE_PROJECT_NAME) -f $(COMPOSE_FILE) logs -f apiweaver; \
	fi

docker-logs-db: ## Show logs from MongoDB service only
	docker-compose -p $(COMPOSE_PROJECT_NAME) -f $(COMPOSE_FILE) logs -f mongodb

# Production Commands
docker-prod: ## Start production environment
	@echo "$(BLUE)Starting APIWeaver production environment...$(NC)"
	@if [ ! -f .env ]; then \
		echo "$(RED)Error: .env file required for production deployment$(NC)"; \
		echo "$(YELLOW)Copy .env.production to .env and configure for production$(NC)"; \
		echo "$(YELLOW)Or use 'make docker-prod-setup' to create production environment$(NC)"; \
		exit 1; \
	fi
	@echo "$(BLUE)Creating required directories...$(NC)"
	@mkdir -p data/mongodb data/apiweaver logs logs/mongodb backups ssl
	docker-compose -p $(COMPOSE_PROJECT_NAME) -f $(COMPOSE_FILE)-prod -f $(COMPOSE_FILE) -f $(COMPOSE_FILE_PROD) up -d
	@echo "$(GREEN)✓ Production environment started$(NC)"
	@echo "$(BLUE)Production Services:$(NC)"
	@echo "  • APIWeaver API: http://localhost:80 (via Nginx)"
	@echo "  • Direct API: http://localhost:8080"
	@echo "  • MongoDB: Internal only (not exposed)"
	@echo "  • Monitoring: http://localhost:9090 (if enabled)"

docker-prod-build: ## Build and start production environment
	@echo "$(BLUE)Building and starting production environment...$(NC)"
	@mkdir -p data/mongodb data/apiweaver logs logs/mongodb backups ssl
	docker-compose -p $(COMPOSE_PROJECT_NAME) -f $(COMPOSE_FILE)-prod -f $(COMPOSE_FILE) -f $(COMPOSE_FILE_PROD) up -d --build

docker-prod-setup: ## Setup production environment with security prompts
	@echo "$(BLUE)Setting up APIWeaver production environment...$(NC)"
	@if [ -f .env ]; then \
		echo "$(YELLOW)Warning: .env file already exists$(NC)"; \
		read -p "Overwrite existing .env file? (y/N): " confirm; \
		if [ "$$confirm" != "y" ] && [ "$$confirm" != "Y" ]; then \
			echo "$(YELLOW)Skipping .env file creation$(NC)"; \
		else \
			cp .env.production .env; \
			echo "$(GREEN)✓ Created .env from production template$(NC)"; \
		fi; \
	else \
		cp .env.production .env; \
		echo "$(GREEN)✓ Created .env from production template$(NC)"; \
	fi
	@echo ""
	@echo "$(RED)IMPORTANT: Update the following in .env file:$(NC)"
	@echo "  • MONGODB_ROOT_PASSWORD"
	@echo "  • JWT_SECRET"
	@echo "  • CORS_ALLOWED_ORIGINS"
	@echo "  • SSL certificate paths"
	@echo ""
	@echo "$(YELLOW)Run 'make docker-prod' after updating .env$(NC)"

docker-prod-scale: ## Scale production services (e.g., make docker-prod-scale API=3 NGINX=2)
	@echo "$(BLUE)Scaling production services...$(NC)"
	@if [ -n "$(API)" ]; then \
		docker-compose -p $(COMPOSE_PROJECT_NAME) -f $(COMPOSE_FILE)-prod -f $(COMPOSE_FILE) -f $(COMPOSE_FILE_PROD) up -d --scale apiweaver=$(API); \
	fi
	@if [ -n "$(NGINX)" ]; then \
		docker-compose -p $(COMPOSE_PROJECT_NAME) -f $(COMPOSE_FILE)-prod -f $(COMPOSE_FILE) -f $(COMPOSE_FILE_PROD) up -d --scale nginx=$(NGINX); \
	fi

# Control Commands
docker-stop: ## Stop all services
	@echo "$(BLUE)Stopping APIWeaver services...$(NC)"
	docker-compose -p $(COMPOSE_PROJECT_NAME) -f $(COMPOSE_FILE) down
	@echo "$(GREEN)✓ Services stopped$(NC)"

docker-restart: ## Restart all services
	@echo "$(BLUE)Restarting APIWeaver services...$(NC)"
	docker-compose -p $(COMPOSE_PROJECT_NAME) -f $(COMPOSE_FILE) restart
	@echo "$(GREEN)✓ Services restarted$(NC)"

docker-scale: ## Scale APIWeaver service (e.g., make docker-scale REPLICAS=3)
	@echo "$(BLUE)Scaling APIWeaver service to $(REPLICAS) replicas...$(NC)"
	docker-compose -p $(COMPOSE_PROJECT_NAME) -f $(COMPOSE_FILE) -f $(COMPOSE_FILE) up -d --scale apiweaver=$(REPLICAS)

# Maintenance Commands
docker-backup: ## Create MongoDB backup
	@echo "$(BLUE)Creating MongoDB backup...$(NC)"
	docker-compose -p $(COMPOSE_PROJECT_NAME) -f $(COMPOSE_FILE) exec mongodb /scripts/backup.sh
	@echo "$(GREEN)✓ Backup completed$(NC)"

docker-restore: ## Restore MongoDB from backup (specify BACKUP_FILE)
	@if [ -z "$(BACKUP_FILE)" ]; then \
		echo "$(RED)Error: BACKUP_FILE variable required$(NC)"; \
		echo "$(YELLOW)Usage: make docker-restore BACKUP_FILE=backup_file.tar.gz$(NC)"; \
		exit 1; \
	fi
	@echo "$(BLUE)Restoring MongoDB from $(BACKUP_FILE)...$(NC)"
	docker-compose -p $(COMPOSE_PROJECT_NAME) -f $(COMPOSE_FILE) exec mongodb /scripts/restore.sh /backups/$(BACKUP_FILE)

docker-health: ## Check health status of all services
	@echo "$(BLUE)Checking service health...$(NC)"
	@docker-compose -p $(COMPOSE_PROJECT_NAME) -f $(COMPOSE_FILE) ps
	@echo ""
	@echo "$(BLUE)Service health checks:$(NC)"
	@if docker-compose -p $(COMPOSE_PROJECT_NAME) ps apiweaver-dev >/dev/null 2>&1; then \
		curl -f http://localhost:8080/health >/dev/null 2>&1 && echo "$(GREEN)✓ APIWeaver Dev: Healthy$(NC)" || echo "$(RED)✗ APIWeaver Dev: Unhealthy$(NC)"; \
		curl -f http://localhost:5173 >/dev/null 2>&1 && echo "$(GREEN)✓ Frontend Dev: Healthy$(NC)" || echo "$(RED)✗ Frontend Dev: Unhealthy$(NC)"; \
	else \
		docker-compose -p $(COMPOSE_PROJECT_NAME) -f $(COMPOSE_FILE) exec -T apiweaver /app/healthcheck.sh && echo "$(GREEN)✓ APIWeaver: Healthy$(NC)" || echo "$(RED)✗ APIWeaver: Unhealthy$(NC)"; \
	fi
	@docker-compose -p $(COMPOSE_PROJECT_NAME) -f $(COMPOSE_FILE) exec -T mongodb mongosh --eval "db.adminCommand('ping')" --quiet && echo "$(GREEN)✓ MongoDB: Healthy$(NC)" || echo "$(RED)✗ MongoDB: Unhealthy$(NC)"
	@curl -f http://localhost:8081 >/dev/null 2>&1 && echo "$(GREEN)✓ MongoDB Express: Healthy$(NC)" || echo "$(RED)✗ MongoDB Express: Unhealthy$(NC)"

docker-stats: ## Show Docker container statistics
	@echo "$(BLUE)Container resource usage:$(NC)"
	docker stats $(shell docker-compose -p $(COMPOSE_PROJECT_NAME) ps -q) --no-stream

# Shell Access Commands
docker-shell: ## Get shell access to APIWeaver container
	@if docker-compose -p $(COMPOSE_PROJECT_NAME) ps apiweaver-dev >/dev/null 2>&1; then \
		echo "$(BLUE)Accessing development container...$(NC)"; \
		docker-compose -p $(COMPOSE_PROJECT_NAME) -f $(COMPOSE_FILE) exec apiweaver-dev sh; \
	else \
		echo "$(BLUE)Accessing production container...$(NC)"; \
		docker-compose -p $(COMPOSE_PROJECT_NAME) -f $(COMPOSE_FILE) exec apiweaver sh; \
	fi

docker-shell-frontend: ## Get shell access to frontend development container
	docker-compose -p $(COMPOSE_PROJECT_NAME) -f $(COMPOSE_FILE) exec frontend-dev sh

docker-shell-tools: ## Get shell access to development tools container
	docker-compose -p $(COMPOSE_PROJECT_NAME) -f $(COMPOSE_FILE) --profile tools exec dev-tools sh

docker-mongo-shell: ## Get MongoDB shell access
	docker-compose -p $(COMPOSE_PROJECT_NAME) -f $(COMPOSE_FILE) exec mongodb mongosh -u admin -p

docker-debug: ## Start Delve debugger session
	@echo "$(BLUE)Starting Delve debugging session...$(NC)"
	@echo "$(YELLOW)Connect your IDE to localhost:2345$(NC)"
	docker-compose -p $(COMPOSE_PROJECT_NAME) -f $(COMPOSE_FILE) exec apiweaver-dev dlv attach 1 --listen=:2345 --headless=true --api-version=2

# Cleanup Commands
docker-clean: ## Clean up Docker resources
	@echo "$(BLUE)Cleaning up Docker resources...$(NC)"
	docker-compose -p $(COMPOSE_PROJECT_NAME) -f $(COMPOSE_FILE) down -v --remove-orphans
	docker system prune -f
	@echo "$(GREEN)✓ Cleanup completed$(NC)"

docker-clean-volumes: ## Clean up Docker volumes (WARNING: DATA LOSS)
	@echo "$(RED)WARNING: This will delete all data volumes!$(NC)"
	@read -p "Are you sure? (yes/no): " confirm && [ "$$confirm" = "yes" ] || exit 1
	docker-compose -p $(COMPOSE_PROJECT_NAME) -f $(COMPOSE_FILE) down -v
	docker volume rm $(shell docker volume ls -q | grep $(COMPOSE_PROJECT_NAME)) 2>/dev/null || true
	@echo "$(GREEN)✓ Volumes cleaned$(NC)"

docker-clean-images: ## Clean up APIWeaver Docker images
	@echo "$(BLUE)Cleaning up APIWeaver images...$(NC)"
	docker rmi $(DOCKER_IMAGE_NAME):latest $(DOCKER_IMAGE_NAME):$(DOCKER_TAG) 2>/dev/null || true
	@echo "$(GREEN)✓ Images cleaned$(NC)"

# Information Commands
docker-ps: ## Show running containers
	docker-compose -p $(COMPOSE_PROJECT_NAME) -f $(COMPOSE_FILE) ps

docker-config: ## Show Docker Compose configuration
	docker-compose -p $(COMPOSE_PROJECT_NAME) -f $(COMPOSE_FILE) config

docker-images: ## Show APIWeaver Docker images
	docker images $(DOCKER_IMAGE_NAME)

docker-version: ## Show version information
	@echo "$(BLUE)Version Information:$(NC)"
	@echo "Docker: $(shell docker --version)"
	@echo "Docker Compose: $(shell docker-compose --version)"
	@echo "APIWeaver Image: $(shell docker run --rm $(DOCKER_IMAGE_NAME):latest /app/apiweaver --version 2>/dev/null || echo 'Image not found')"

# Quick start commands
quick-start: docker-dev ## Quick start: run development environment with hot reload

quick-start-build: docker-dev-build ## Quick start: build and run development environment

quick-prod: docker-build docker-prod ## Quick start: build and run production environment

# Development workflow commands
dev-restart: ## Restart development services
	@echo "$(BLUE)Restarting development services...$(NC)"
	docker-compose -p $(COMPOSE_PROJECT_NAME) -f $(COMPOSE_FILE) restart apiweaver-dev frontend-dev
	@echo "$(GREEN)✓ Development services restarted$(NC)"

dev-rebuild: ## Rebuild and restart development services
	@echo "$(BLUE)Rebuilding development services...$(NC)"
	docker-compose -p $(COMPOSE_PROJECT_NAME) -f $(COMPOSE_FILE) -f $(COMPOSE_FILE) up -d --build apiweaver-dev frontend-dev
	@echo "$(GREEN)✓ Development services rebuilt and restarted$(NC)"

dev-status: ## Show status of development environment
	@echo "$(BLUE)Development Environment Status:$(NC)"
	@echo ""
	@docker-compose -p $(COMPOSE_PROJECT_NAME) -f $(COMPOSE_FILE) ps apiweaver-dev frontend-dev mongodb mongo-express
	@echo ""
	@echo "$(BLUE)Available endpoints:$(NC)"
	@echo "  • API: http://localhost:8080"
	@echo "  • Frontend: http://localhost:5173"
	@echo "  • MongoDB Express: http://localhost:8081"
	@echo "  • Debug Port: localhost:2345"

dev-install: ## Install/update dependencies in development containers
	@echo "$(BLUE)Updating Go dependencies...$(NC)"
	docker-compose -p $(COMPOSE_PROJECT_NAME) -f $(COMPOSE_FILE) exec apiweaver-dev go mod download
	@echo "$(BLUE)Updating Node.js dependencies...$(NC)"
	docker-compose -p $(COMPOSE_PROJECT_NAME) -f $(COMPOSE_FILE) exec frontend-dev npm install
	@echo "$(GREEN)✓ Dependencies updated$(NC)"