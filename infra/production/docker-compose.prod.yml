# Docker Compose configuration for production deployment
# Use: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up

version: '3.8'

services:
  # Production APIWeaver configuration
  apiweaver:
    image: apiweaver:${VERSION:-latest}
    restart: always
    environment:
      LOG_LEVEL: ${LOG_LEVEL:-warn}
      NODE_ENV: production
      GIN_MODE: release
      
      # Production Performance Optimizations
      GOMAXPROCS: 2
      GOGC: 100
      GOMEMLIMIT: 400MiB
      
      # Enhanced Security
      ENABLE_PPROF: false
      ENABLE_DEBUG_ENDPOINTS: false
      
      # Production MongoDB Configuration
      MONGODB_MAX_POOL_SIZE: 100
      MONGODB_MIN_POOL_SIZE: 5
      MONGODB_MAX_IDLE_TIME: 30s
      
      # Rate Limiting (stricter in production)
      RATE_LIMIT_REQUESTS_PER_MINUTE: 60
      RATE_LIMIT_BURST: 5
    deploy:
      mode: replicated
      replicas: ${APIWEAVER_REPLICAS:-2}
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
      rollback_config:
        parallelism: 1
        delay: 5s
        failure_action: pause
        monitor: 30s

  # Production MongoDB configuration
  mongodb:
    restart: always
    ports: []  # Don't expose MongoDB port in production
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGODB_DATABASE}
    command: [
      "mongod",
      "--config", "/etc/mongod.conf",
      "--auth",
      "--bind_ip_all",
      "--quiet",
      "--logpath", "/var/log/mongodb/mongod.log",
      "--logappend",
      "--wiredTigerCacheSizeGB", "${MONGODB_CACHE_SIZE:-0.5}",
      "--wiredTigerCollectionBlockCompressor", "snappy",
      "--wiredTigerIndexPrefixCompression", "true",
      "--wiredTigerConcurrentReadTransactions", "128",
      "--wiredTigerConcurrentWriteTransactions", "128"
    ]
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - mongodb_logs:/var/log/mongodb
      - ../docker/mongodb/mongod.conf:/etc/mongod.conf:ro
      - backup_storage:/backups
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          memory: ${MONGODB_MEMORY_LIMIT:-1G}
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 300s
      placement:
        constraints:
          - node.role == manager  # Ensure MongoDB runs on manager node for data persistence

  # Enable Nginx for production
  nginx:
    profiles: []  # Remove profile restriction
    restart: always
    environment:
      NGINX_WORKER_PROCESSES: auto
      NGINX_WORKER_CONNECTIONS: 1024
      NGINX_KEEPALIVE_TIMEOUT: 65
      NGINX_CLIENT_MAX_BODY_SIZE: ${MAX_UPLOAD_SIZE:-10m}
    volumes:
      - ../docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
      - ../../ssl:/etc/nginx/ssl:ro  # SSL certificates
    deploy:
      mode: replicated
      replicas: ${NGINX_REPLICAS:-1}
      resources:
        limits:
          memory: 128M
          cpus: '0.5'
        reservations:
          memory: 64M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # Disable development services
  mongo-express:
    profiles:
      - disabled

  # Production monitoring and backup services
  mongodb-exporter:
    image: percona/mongodb_exporter:0.39
    container_name: apiweaver-mongodb-exporter
    restart: unless-stopped
    depends_on:
      - mongodb
    environment:
      MONGODB_URI: mongodb://${MONGODB_ROOT_USERNAME}:${MONGODB_ROOT_PASSWORD}@mongodb:27017/${MONGODB_DATABASE}?authSource=admin
    ports:
      - "9216:9216"
    networks:
      - apiweaver-network
    profiles:
      - monitoring

  backup-scheduler:
    image: mongo:7.0-jammy
    container_name: apiweaver-backup-scheduler
    restart: unless-stopped
    depends_on:
      - mongodb
    environment:
      MONGODB_URI: mongodb://${MONGODB_ROOT_USERNAME}:${MONGODB_ROOT_PASSWORD}@mongodb:27017/${MONGODB_DATABASE}?authSource=admin
      BACKUP_SCHEDULE: ${BACKUP_SCHEDULE:-0 2 * * *}
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-30}
    volumes:
      - ../../backups:/backups
      - ../docker/scripts:/scripts:ro
    command: |
      sh -c "
        echo 'Setting up backup cron job...'
        echo '$$BACKUP_SCHEDULE /scripts/backup.sh' > /etc/cron.d/mongodb-backup
        chmod 0644 /etc/cron.d/mongodb-backup
        crontab /etc/cron.d/mongodb-backup
        echo 'Starting cron daemon...'
        cron -f
      "
    networks:
      - apiweaver-network
    profiles:
      - backup

volumes:
  mongodb_logs:
    driver: local

networks:
  apiweaver-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: apiweaver-br0
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1